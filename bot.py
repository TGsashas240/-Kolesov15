import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WELCOME_IMAGE_URL = os.getenv('WELCOME_IMAGE_URL', 'https://i.ibb.co/tM36RH31/photo-2025-08-22-11-07-10.jpg')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = int(os.getenv('PORT', 8000))
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

logger.info(f"WELCOME_IMAGE_URL: {WELCOME_IMAGE_URL}")
logger.info(f"WEBHOOK_URL: {WEBHOOK_URL}")
logger.info(f"PORT: {PORT}")
logger.info(f"ADMIN_ID: {ADMIN_ID}")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
CHATS_FILE = 'chats.json'

def load_chats():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(CHATS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è chats.json, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        return {}

def save_chats(chats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(CHATS_FILE, 'w') as f:
            json.dump(chats, f, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chats.json: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤"""
    if update.message and update.message.chat:
        chat = update.message.chat
        if chat.type in ['group', 'supergroup', 'channel']:
            chats = load_chats()
            chat_id = str(chat.id)
            if chat_id not in chats:
                chats[chat_id] = chat.title or f"–ß–∞—Ç {chat_id}"
                save_chats(chats)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {chat.title or chat_id}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    welcome_text = (
        "üåü –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!  \n\n"
        "–ù–∞—à –Ω–æ–≤—ã–π —á–∞—Ç —É—Å–ª—É–≥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è! "
        "–ú—ã —Ä–∞–¥—ã –±—É–¥–µ–º, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –Ω—ë–º.\n\n"
        "‚ú® –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:\n\n"
        "üí° <i>–í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üíé –ß–∞—Ç —É—Å–ª—É–≥ —Ä–∞–π –ª—é–∫—Å", url="https://t.me/+YCAX1V58SS9mNzAy")],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã —Ä–∞–π –ª—é–∫—Å", url="https://t.me/+kWkpsyHVbZQ2OWMy")],
        [InlineKeyboardButton("üì¢ –†–∞–π –ª—é–∫—Å –∫–∞–Ω–∞–ª", url="https://t.me/+UXs_4HwamkljYjI6")],
        [InlineKeyboardButton("üì£ –†–µ–∫–ª–∞–º–∞ —Ä–∞–π –ª—é–∫—Å", url="https://t.me/+kG38zOCy3x82YzAy")],
        [InlineKeyboardButton("üí¨ –†–∞–π –ª—é–∫—Å –æ–±—â–µ–Ω–∏—è", url="https://t.me/+648n00MLjswyMWUy")],
        [InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    try:
        if WELCOME_IMAGE_URL:
            await update.message.reply_photo(
                photo=WELCOME_IMAGE_URL,
                caption=welcome_text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                welcome_text, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            welcome_text, 
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ <b>–†–∞–π –õ—é–∫—Å –ë–æ—Ç</b>\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å—Å—ã–ª–∫–∞–º–∏\n"
        "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "üîó <b>–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:</b>\n"
        "‚Ä¢ –ß–∞—Ç —É—Å–ª—É–≥ - –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ –û—Ç–∑—ã–≤—ã - –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö\n"
        "‚Ä¢ –ö–∞–Ω–∞–ª - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–∫–ª–∞–º–∞ - —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã\n"
        "‚Ä¢ –û–±—â–µ–Ω–∏–µ - –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n\n"
        "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞!"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        try:
            await update.callback_query.message.delete()
            await context.bot.send_message(
                chat_id=update.callback_query.from_user.id,
                text=help_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø—Ä–∞–≤–∫–∏: {e}")
            try:
                await update.callback_query.edit_message_caption(
                    caption=help_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except:
                await context.bot.send_message(
                    chat_id=update.callback_query.from_user.id,
                    text=help_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "help":
        await help_command(update, context)
    elif query.data == "main_menu":
        welcome_text = (
            "üåü –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üåü\n\n"
            "–ù–∞—à –Ω–æ–≤—ã–π —á–∞—Ç —É—Å–ª—É–≥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è! "
            "–ú—ã —Ä–∞–¥—ã –±—É–¥–µ–º, –µ—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –Ω—ë–º.\n\n"
            "‚ú® –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:\n\n"
            "üí° <i>–í–≤–µ–¥–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</i>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üíé –ß–∞—Ç —É—Å–ª—É–≥ —Ä–∞–π –ª—é–∫—Å", url="https://t.me/+YCAX1V58SS9mNzAy")],
            [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã —Ä–∞–π –ª—é–∫—Å", url="https://t.me/+kWkpsyHVbZQ2OWMy")],
            [InlineKeyboardButton("üì¢ –†–∞–π –ª—é–∫—Å –∫–∞–Ω–∞–ª", url="https://t.me/+UXs_4HwamkljYjI6")],
            [InlineKeyboardButton("üì£ –†–µ–∫–ª–∞–º–∞ —Ä–∞–π –ª—é–∫—Å", url="https://t.me/+kG38zOCy3x82YzAy")],
            [InlineKeyboardButton("üí¨ –†–∞–π –ª—é–∫—Å –æ–±—â–µ–Ω–∏—è", url="https://t.me/+648n00MLjswyMWUy")],
            [InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            if WELCOME_IMAGE_URL:
                await query.message.delete()
                await context.bot.send_photo(
                    chat_id=query.from_user.id,
                    photo=WELCOME_IMAGE_URL,
                    caption=welcome_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ: {e}")
            try:
                await query.edit_message_caption(
                    caption=welcome_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except:
                await context.bot.send_photo(
                    chat_id=query.from_user.id,
                    photo=WELCOME_IMAGE_URL,
                    caption=welcome_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )

async def rek_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rek –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É–±–∏—Ä–∞—è /rek
    if update.message and update.message.text:
        message_text = update.message.text
        if message_text.startswith('/rek'):
            message_text = message_text[4:].lstrip()  # –£–±–∏—Ä–∞–µ–º /rek –∏ –ø—Ä–æ–±–µ–ª—ã —Å–ª–µ–≤–∞
        else:
            message_text = None
    else:
        message_text = None
    
    if not message_text:
        await update.message.reply_text(
            "üì¢ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /rek –ü—Ä–∏–≤–µ—Ç, –≤—Å–µ–º!",
            parse_mode='HTML'
        )
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        chats = load_chats()
        chat_ids = set(chats.keys())
        
        if not chat_ids:
            await update.message.reply_text(
                "‚ùå –ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö, –∫—É–¥–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                parse_mode='HTML'
            )
            return

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
        successful_chats = []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        for chat_id in chat_ids:
            try:
                await context.bot.send_message(
                    chat_id=int(chat_id),
                    text=message_text  # –ë–µ–∑ parse_mode –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                )
                chat_name = chats[chat_id]
                successful_chats.append(chat_name)
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–∞—Ö
        if successful_chats:
            chats_list = "\n".join([f"‚Ä¢ {chat}" for chat in successful_chats])
            await update.message.reply_text(
                f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: '{message_text}'\n\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:\n{chats_list}",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç.",
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            parse_mode='HTML'
        )

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
telegram_app = Application.builder().token(BOT_TOKEN).build()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("help", help_command))
telegram_app.add_handler(CommandHandler("rek", rek_command))
telegram_app.add_handler(CallbackQueryHandler(button_callback))
telegram_app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

if __name__ == '__main__':
    # –ï—Å–ª–∏ –µ—Å—Ç—å WEBHOOK_URL, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫
    if WEBHOOK_URL:
        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook...")
        telegram_app.run_webhook(
            listen='0.0.0.0',
            port=PORT,
            url_path='',
            webhook_url=f"{WEBHOOK_URL}/webhook",
            on_startup=None, # on_startup –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
            on_shutdown=None
        )
    else:
        # –†–µ–∂–∏–º polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        telegram_app.run_polling()